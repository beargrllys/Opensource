#!/usr/bin/env python
# -*- coding: utf-8 -*-
#!/usr/bin/python
#--------------------------------------
#    ___  ___  _ ____
#   / _ \/ _ \(_) __/__  __ __
#  / , _/ ___/ /\ \/ _ \/ // /
# /_/|_/_/  /_/___/ .__/\_, /
#                /_/   /___/
#
#  lcd_i2c.py
#  LCD test script using I2C backpack.
#  Supports 16x2 and 20x4 screens.
#
# Author : Matt Hawkins
# Date   : 20/09/2015
#
# http://www.raspberrypi-spy.co.uk/
#
# Copyright 2015 Matt Hawkins
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#--------------------------------------
import smbus
import time
import RPi.GPIO as GPIO

import os
import random
import vlc
from ftplib import FTP
comlist=os.listdir("/home/pi/Music")

def IPchecker():
    IPt = "192.168.0.22"
    ftptemp = FTP(IPt,"root","raspberry")
    return IPt
        
print(str(IPchecker()))
IP=str(IPchecker())

ftp = FTP(IP,"root","raspberry")
PATH = "ftp://"+IP+"/"
instance = vlc.Instance()
player=instance.media_player_new()


def down():
    allmusic = []
    junklist = []
    musiclist = []
    channellist = []
    musicfolderlist=[]
    channel = []
    ftp = FTP("192.168.0.22","root","raspberry")
    ftp.cwd("/storage")
    ftp.retrlines("LIST", junklist.append)
    print(junklist)
    i=0

    while i<len(junklist):
        word = junklist[i].split(None,8)
        filename=word[-1].lstrip()
        musiclist.append(filename)
        i+=1
    print(musiclist)
    i=0
    junklist = []
    junklist.append("Non")

    while i<len(musiclist):
        name = musiclist[i]
        print(name)
        if(len(name)>4):
            if(name[-4]!="." and name[-5]!="."):
                channellist.append(name)#채널이 름
            else:
                junklist.append(name)#곡 들
        else:
            channellist.append(name)#채널이 름
        i+=1
    channellist.append(junklist)
    allmusic = junklist
    #channellist(앞부분: 채 널종 류/ 뒷부분:non + 잉여곡 명)
    print (channellist)
    junklist = []
    i=0
    j=0
    while i<(len(channellist)-1):
        channelname = channellist[i]
        ftp.cwd("/storage/"+channelname)
        ftp.retrlines("LIST", junklist.append)
        musiclist=[]
        musiclist.append(channelname)
        channel.append(channelname)
        #musiclist[0]에 채널이름 넣기
        while j<len(junklist):
            word = junklist[j].split(None,8)
            filename = word[-1].lstrip()
            musiclist.append(filename)
            allmusic.append(filename)
            j+=1
            #musiclist[1:]해당채널의 음악
        print(musiclist)
        i+=1

        musicfolderlist.append(musiclist)
        #채널 별 정리
    musicfolderlist.append(channellist[-1])
    #channellist[-1]:정 리안 된잉여곡 들
    #musicfolderlist[-1]:정리안된 곡들
    #musicfolderlist[n][0]:채널이름들

    print(musicfolderlist)
    
    return musicfolderlist, channel, allmusic



def mediaplayer(LIST,SUNSE,d, channelname):

    media=instance.media_new(PATH+"storage/"+str(channelname)+"/"+LIST[SUNSE])
    player.set_media(media)
    player.play()

# Define some device parameters
I2C_ADDR  = 0x27 # I2C device address
LCD_WIDTH = 16   # Maximum characters per line

# Define some device constants
LCD_CHR = 1 # Mode - Sending data
LCD_CMD = 0 # Mode - Sending command

LCD_LINE_1 = 0x80 # LCD RAM address for the 1st line
LCD_LINE_2 = 0xC0 # LCD RAM address for the 2nd line
LCD_LINE_3 = 0x94 # LCD RAM address for the 3rd line
LCD_LINE_4 = 0xD4 # LCD RAM address for the 4th line

LCD_BACKLIGHT  = 0x08  # On
#LCD_BACKLIGHT = 0x00  # Off

ENABLE = 0b00000100 # Enable bit

# Timing constants
E_PULSE = 0.0005
E_DELAY = 0.0005

#Open I2C interface
#bus = smbus.SMBus(0)  # Rev 1 Pi uses 0
bus = smbus.SMBus(1) # Rev 2 Pi uses 1

def lcd_init():
  # Initialise display
  lcd_byte(0x33,LCD_CMD) # 110011 Initialise
  lcd_byte(0x32,LCD_CMD) # 110010 Initialise
  lcd_byte(0x06,LCD_CMD) # 000110 Cursor move direction
  lcd_byte(0x0C,LCD_CMD) # 001100 Display On,Cursor Off, Blink Off 
  lcd_byte(0x28,LCD_CMD) # 101000 Data length, number of lines, font size
  lcd_byte(0x01,LCD_CMD) # 000001 Clear display
  time.sleep(E_DELAY)

def lcd_byte(bits, mode):
  # Send byte to data pins
  # bits = the data
  # mode = 1 for data
  #        0 for command

  bits_high = mode | (bits & 0xF0) | LCD_BACKLIGHT
  bits_low = mode | ((bits<<4) & 0xF0) | LCD_BACKLIGHT

  # High bits
  bus.write_byte(I2C_ADDR, bits_high)
  lcd_toggle_enable(bits_high)

  # Low bits
  bus.write_byte(I2C_ADDR, bits_low)
  lcd_toggle_enable(bits_low)

def lcd_toggle_enable(bits):
  # Toggle enable
  time.sleep(E_DELAY)
  bus.write_byte(I2C_ADDR, (bits | ENABLE))
  time.sleep(E_PULSE)
  bus.write_byte(I2C_ADDR,(bits & ~ENABLE))
  time.sleep(E_DELAY)

def lcd_string(message,line):
  # Send string to display
  

  message = message.ljust(LCD_WIDTH," ")
  

  lcd_byte(line, LCD_CMD)

  for i in range(LCD_WIDTH):
    lcd_byte(ord(message[i]),LCD_CHR)

           

def localdown(mlist,sunse):

    #ftp.retrlines("LIST")

    #print(listing)
    speciallist = os.listdir("/home/pi/Music/special/")
   
    isthere=False
    #word = mlist[sunse].split(None,8)
    #print(word)
    #filename=word[-1].lstrip()
    #print(filename)
    for localname in speciallist:
        if (localname==mlist[sunse] and isthere==False):
            isthere=True
    if (isthere==False):
        download(mlist[sunse])
    return speciallist
        
def sound(number):
    player.audio_set_volume(number)

def finder(musicname, musicfolderlist):
    i =0
    j =1
    for i in range(0,len(musicfolderlist)):
        for j in range(1,len(musicfolderlist[i])):
            if musicname == musicfolderlist[i][j]:
                sunse = j
                llist=musicfolderlist[i]###############################
    return sunse, llist
            
def main():
  speciallist = os.listdir("/home/pi/Music/special/")
  index = open('index4.txt','r')
  temp = index.readline()
  indexcontent = str(index.readline())
  print("\n\n\n\n"+indexcontent+"\n\n\n\n")
  index.close()
 
  
  # check the download list
  downloading=False
  ########################################################################
  musicfolderlist, channel , allmusic = down()
  #print(serverlist)

  lcd_string(" Hello!",LCD_LINE_1)###ERORR
  time.sleep(2)

  # Initialise display
  lcd_init()
  GPIO.setmode(GPIO.BCM)

  GPIO.setup(20, GPIO.IN)
  GPIO.setup(21, GPIO.IN)
  GPIO.setup(23, GPIO.IN)
  GPIO.setup(24, GPIO.IN)
  GPIO.setup(25, GPIO.IN)
  
  #txt file save
  if indexcontent not in allmusic:
      indexcontent = musicfolderlist[0][1]
  if indexcontent == ' ':
      indexcontent = musicfolderlist[0][1]
  sunse ,llist= finder(indexcontent, musicfolderlist)
  #sunseo = specislist.index(indexcontent)
  d=15
  mediaplayer(llist, sunse,d,llist[0])
  time.sleep(1)
     
  STATE = player.get_state()
  STRING = str(STATE)
  k=0
  cnt = 0
  cntt = 0
  x = 0
  key=0
  keytype = "normal"
  number = 50
  mlist = llist
  channelname = llist[0]
  channelcnt = len(channel)
  e = 0
  m =0
  a = False
  i=0
  while True:
      
      #sunsemode=number of next song
      #서버리스트 를결정해주기
      
      if i< 0:
          i = len(channel) -1
      if i > len(channel) -1 :
          i = 0
      print(sunsed, musicfolderlist[i][0])
      
      
      if key%4 == 3 and GPIO.input(23)==0:
          mlist = musicfolderlist[i]
          
         
          sunse = 0
          channelname = str(musicfolderlist[i][0])
          player.stop()
          mediaplayer(mlist,sunse,d,channelname)
          if len(mlist[sunse])<=15 :
                  lcd_string(mlist[sunse]+ str(" ")*k,LCD_LINE_1)
                  if key%4 !=0 :
                      lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
                  else:
                      if  cntt%2 == 0:
                      
                          lcd_string(str(STRING[6:])+ str(" ")+str(sunsetype),LCD_LINE_2)
                          cnt = cnt+(0.2)
                          cntt = int(cnt/2)
              
                      if  cntt%2 == 1:
              
                          lcd_string(str(keytype) + str(" ")+str(sunsetype),LCD_LINE_2)
                          cnt = cnt + (0.2)
                          cntt = int(cnt/2)
 
          else:
              if cntt%2 == 0 :
                  name = mlist[sunse]
                  lcd_string(name[:15] , LCD_LINE_1)
                  if key%4 !=0:
                      lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
                  else:
                      lcd_string(str(STRING[6:])+str(" ")+str(sunsetype),LCD_LINE_2)
                  cnt = cnt+(0.2)
                  cntt = int(cnt/2)
              if cntt%2 == 1:
                  name = mlist[sunse]
                  lcd_string(name[16:32] , LCD_LINE_1)
                  if key%4 !=0:
                      lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
                  else:
                      lcd_string(str(keytype) +str(" ")+ str(sunsetype),LCD_LINE_2)
                  cnt = cnt + (0.2)
                  cntt = int(cnt/2)
                  
      
          
      if d%3 == 1:
          sunsemode = sunse
          sunsetype ='repeat'
          
      if d%3 == 2:
          sunsemode = random.randrange(0,len(mlist))
          sunsetype = 'random'
        
      if d%3 == 0:  
          sunsemode = sunse +1
          sunsetype = 'order'
      
      if key%4 == 3:
          channelname = str(musicfolderlist[i][0])
      if key%4 == 0 or key %4 == 1:
          channelname = sunsetype
      if key%4 == 2:
          channelname = str(number)  
      
      if(k==12):
          k=0
      STATE = player.get_state()
      STRING = str(STATE)

      #print(STRING)
      k=k+1
      time.sleep(0.2)
      if d == 15:
          sunsetype = 'order'
      #print(sunse)
    

      if len(mlist[sunse])<=15 :
          lcd_string(mlist[sunse]+ str(" ")*k,LCD_LINE_1)
          if key%4 !=0 :
              lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
          else:
              if  cntt%2 == 0 :
                      
                  lcd_string(str(STRING[6:])+ str(" ")+str(sunsetype),LCD_LINE_2)
                  cnt = cnt+(0.2)
                  cntt = int(cnt/2)
              
              if  cntt%2 == 1:
              
                  lcd_string(str(keytype) + str(" ")+str(sunsetype),LCD_LINE_2)
                  cnt = cnt + (0.2)
                  cntt = int(cnt/2)
 
      else:
              if cntt%2 == 0 :
                  name = mlist[sunse]
                  lcd_string(name[:15] , LCD_LINE_1)
                  if key%4 !=0:
                      lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
                  else:
                      lcd_string(str(STRING[6:])+str(" ")+str(sunsetype),LCD_LINE_2)
                  cnt = cnt+(0.2)
                  cntt = int(cnt/2)
              if cntt%2 == 1:
                  name = mlist[sunse]
                  lcd_string(name[16:32] , LCD_LINE_1)
                  if key%4 !=0:
                      lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
                  else:
                      lcd_string(str(keytype) +str(" ")+ str(sunsetype),LCD_LINE_2)
                  cnt = cnt + (0.2)
                  cntt = int(cnt/2)
         

      if GPIO.input(25) == 0:
          
          #playtype
          key = key+1
          if key%4 == 3:
              keytype = "channel"
              #change channel
          if key%4 == 2: 
              keytype = "volume"
              #volume 
          if key%4 ==1:
              keytype = "type: "
              # chang type(d)
          if key%4 == 0:
              keytype = "normal"
              #nothing
        
        
      if STATE== 6:#곡의재생이완료
          sunse = sunsemode
          if sunse==len(mlist):
              sunse=0
          mediaplayer(mlist, sunse,d,channelname)
          STATE = player.get_state()
          STRING =str(STATE)
          if len(mlist[sunse])<=15 :
              lcd_string(mlist[sunse]+ str(" ")*k,LCD_LINE_1)
              if key%4 !=0:
                  lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
              if  cntt%2 == 0 and key%4 ==0:
                  
                  lcd_string(str(STRING[6:])+ str(" ")+str(sunsetype),LCD_LINE_2)
                  cnt = cnt+(0.2)
                  cntt = int(cnt/2)
                         
              if  cntt%2 == 1 and key%4 ==0:
                 
                  lcd_string(str(keytype) + str(" ")+str(sunsetype),LCD_LINE_2)
                  cnt = cnt + (0.2)
                  cntt = int(cnt/2)
          else:
              if cntt%2 == 0 :
                  name = mlist[sunse]
                  lcd_string(name[:15] , LCD_LINE_1)
                  if key%4 !=0:
                      lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
                  else:
                      lcd_string(str(STRING[6:])+str(" ")+str(sunsetype),LCD_LINE_2)
                  cnt = cnt+(0.2)
                  cntt = int(cnt/2)
              if cntt%2 == 1:
                  name = mlist[sunse]
                  lcd_string(name[16:32] , LCD_LINE_1)
                  if key%4 !=0:
                      lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
                  else:
                      lcd_string(str(keytype) +str(" ")+ str(sunsetype),LCD_LINE_2)
                  cnt = cnt + (0.2)
                  cntt = int(cnt/2)
         
              
              
          time.sleep(1)
          k=k+1
        
              
      if GPIO.input(21) == 0 and key%4 == 3:
          i = i-1
          
      if GPIO.input(21) == 0 and key%4 == 2:
          number = number-10
          sound(number)
          
      if GPIO.input(21) == 0 and key%4 ==1:
          d = d-1
          
      if GPIO.input(21) == 0 and key%4 ==0:
        #back
         k=0
         player.stop()
         if d == 15:
             sunsemode = sunse -1
            
         if d%3 == 0:
             if sunse ==0 :
                 sunse = len(mlist)-1
             else:
                 sunsemode = sunse - 1
              
         if d%3 == 1:
             sunsemode = sunse
        
         if d%3 == 2:
             sunsemode = random.randrange(0,len(mlist))

         sunse = sunsemode

         print(mlist)
         #print(sunse, d, musicfolderlist[i][0])
         #sunse, mlist =finder(mlist[sunse])
         mediaplayer(mlist, sunse,d,channelname)
         STATE = player.get_state()
         STRING =str(STATE)
         if len(mlist[sunse])<=15 :
             lcd_string(mlist[sunse]+ str(" ")*k,LCD_LINE_1)
             if key%4 !=0 :
                 lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
             if  cntt%2 == 0 and key%4 ==0 :
                 lcd_string(str(STRING[6:])+ str(" ")+str(sunsetype),LCD_LINE_2)
                 cnt = cnt+(0.2)
                 cntt = int(cnt/2)
             if  cntt%2 == 1 and key%4 ==0 :
                 lcd_string(str(keytype) + str(" ")+str(sunsetype),LCD_LINE_2)
                 cnt = cnt + (0.2)
                 cntt = int(cnt/2)
         else:
              if cntt%2 == 0 :
                  name = mlist[sunse]
                  lcd_string(name[:15] , LCD_LINE_1)
                  if key%4 !=0:
                      lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
                  else:
                      lcd_string(str(STRING[6:])+str(" ")+str(sunsetype),LCD_LINE_2)
                  cnt = cnt+(0.2)
                  cntt = int(cnt/2)
              if cntt%2 == 1:
                  name = mlist[sunse]
                  lcd_string(name[16:32] , LCD_LINE_1)
                  if key%4 !=0:
                      lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
                  else:
                      lcd_string(str(keytype) +str(" ")+ str(sunsetype),LCD_LINE_2)
                  cnt = cnt + (0.2)
                  cntt = int(cnt/2)
              
         STATE = player.get_state()
         STRING = str(STATE)
         time.sleep(0.5)
         k = k + 1
      if GPIO.input(20) == 0 and key%4 ==3:
          i = i+1
           
      if GPIO.input(20) == 0 and key%4 ==2:
          number = number +10
          sound(number)
          
      if GPIO.input(20) == 0 and key%4 ==1:
          d = d + 1
      if GPIO.input(20) == 0 and key%4 ==0:
          k=0
          #next
          player.stop()
              
          if d%3 == 0:
              if sunse ==len(mlist):
                  sunsemode = 0
              else:
                  sunsemode = sunse + 1
              
          if d%3 == 1:
              sunsemode = sunse
            
          if d%3 == 2:
              sunsemode = random.randrange(0,len(mlist))

          sunse = sunsemode
        
          mediaplayer(mlist, sunse,d,channelname)
          STATE = player.get_state()
          STRING =str(STATE)
          if len(mlist[sunse])<=15 :
              lcd_string(mlist[sunse]+ str(" ")*k,LCD_LINE_1)
              if key%4 !=0 :
                 lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
             
              if  cntt%2 == 0 and key%4 ==0 :
                 
                 lcd_string(str(STRING[6:])+ str(" ")+str(sunsetype),LCD_LINE_2)
                 cnt = cnt+(0.2)
                 cntt = int(cnt/2)
              if  cntt%2 == 1 and key%4 ==0 :
                 
                 lcd_string(str(keytype) + str(" ")+str(sunsetype),LCD_LINE_2)
                 cnt = cnt + (0.2)
                 cntt = int(cnt/2)
          else:
              if cntt%2 == 0 :
                  name = mlist[sunse]
                  lcd_string(name[:15] , LCD_LINE_1)
                  if key%4 !=0:
                      lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
                  else:
                      lcd_string(str(STRING[6:])+str(" ")+str(sunsetype),LCD_LINE_2)
                  cnt = cnt+(0.2)
                  cntt = int(cnt/2)
              if cntt%2 == 1:
                  name = mlist[sunse]
                  lcd_string(name[16:32] , LCD_LINE_1)
                  if key%4 !=0:
                      lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
                  else:
                      lcd_string(str(keytype) +str(" ")+ str(sunsetype),LCD_LINE_2)
                  cnt = cnt + (0.2)
                  cntt = int(cnt/2)
         
          time.sleep(0.5)
          k=k+1

      if GPIO.input(23) == 0 and key%4 == 0 :
          k=0
          #pause
          player.pause()
          STATE = player.get_state()
          STRING =str(STATE)
          if len(mlist[sunse])<=15 :
              lcd_string(mlist[sunse]+ str(" ")*k,LCD_LINE_1)
              if key%4 !=0 :
                  lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
              else:
                  if  cntt%2 == 0:
                      
                      lcd_string(str(STRING[6:])+ str(" ")+str(sunsetype),LCD_LINE_2)
                      cnt = cnt+(0.2)
                      cntt = int(cnt/2)
              
                  if  cntt%2 == 1:
              
                      lcd_string(str(keytype) + str(" ")+str(sunsetype),LCD_LINE_2)
                      cnt = cnt + (0.2)
                      cntt = int(cnt/2)
 
          else:
              if cntt%2 == 0 :
                  name = mlist[sunse]
                  lcd_string(name[:15] , LCD_LINE_1)
                  if key%4 !=0:
                      lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
                  else:
                      lcd_string(str(STRING[6:])+str(" ")+str(sunsetype),LCD_LINE_2)
                  cnt = cnt+(0.2)
                  cntt = int(cnt/2)
              if cntt%2 == 1:
                  name = mlist[sunse]
                  lcd_string(name[16:32] , LCD_LINE_1)
                  if key%4 !=0:
                      lcd_string(str(keytype)+ str(" ")+str(channelname),LCD_LINE_2)
                  else:
                      lcd_string(str(keytype) +str(" ")+ str(sunsetype),LCD_LINE_2)
                  cnt = cnt + (0.2)
                  cntt = int(cnt/2)
         
          time.sleep(0.5)
          k=k+1
    
      if STATE == 5:
          break
      if GPIO.input(24) == 0 :
          #shutdown
          STATE = player.get_state()
          player.stop()
          lcd_string(str("Goodbye!"),LCD_LINE_1)
          time.sleep(2)
          lcd_string(str(" "),LCD_LINE_2)
          time.sleep(2)
          break
          
  os.remove("/home/pi/index4.txt")
  indexnum=str(mlist[sunse])
  index = open('index4.txt','w')
  index.write(IP+"\n"+indexnum)
  index.close()
   
   
    


if __name__ == '__main__':

  try:
    main()
  except KeyboardInterrupt:
    pass
  finally:
    lcd_byte(0x01, LCD_CMD)

#하경이에 게쓰 는편지.....
    #하경 아안녕? 나 는6 조 정수야.....그동 안속터져 서힘들었지???나도야....
    #언제 쯤오니.....나 도디자 인킹왕쨩짱ㄴ맨셔 이되 고싶다....
    #빨 리손잡 이만들 고싶다....라이 노뿌져뿌
